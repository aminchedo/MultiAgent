import type { NextApiRequest, NextApiResponse } from 'next'
import { jobsStore } from '../store'
import JSZip from 'jszip'

export const config = {
	api: {
		responseLimit: false
	}
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
	if (req.method !== 'GET') {
		return res.status(405).json({ error: 'Method not allowed' })
	}

	try {
		const { id } = req.query
		const backend = process.env.NEXT_PUBLIC_API_URL

		if (backend) {
			const resp = await fetch(`${backend}/api/download/${id}`)
			if (!resp.ok) return res.status(resp.status).end()
			const arrayBuffer = await resp.arrayBuffer()
			res.setHeader('Content-Type', 'application/zip')
			res.setHeader('Content-Disposition', `attachment; filename="vibe-project-${id}.zip"`)
			return res.status(200).send(Buffer.from(arrayBuffer))
		}

		const job = jobsStore.get(String(id))
		if (!job) return res.status(404).json({ error: 'Job not found' })

		const zip = new JSZip()
		zip.file(
			'src/App.jsx',
			`import React from 'react'\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>ðŸŽ¨ Generated by Vibe Coding</h1>\n      <p>${job.description}</p>\n    </div>\n  )\n}\n`
		)
		zip.file(
			'README.md',
			`# Generated by Vibe Coding Platform\n\nThis project was generated by 5 AI agents.\n\n## Description\n${job.description}\n\n## How to Run\n1. npm install\n2. npm start\n`
		)
		const nodeBuffer = await zip.generateAsync({ type: 'nodebuffer' })
		res.setHeader('Content-Type', 'application/zip')
		res.setHeader('Content-Disposition', `attachment; filename="vibe-project-${job.id}.zip"`)
		return res.status(200).send(nodeBuffer)
	} catch (err: any) {
		return res.status(500).json({ error: err?.message || 'Failed to download project' })
	}
}