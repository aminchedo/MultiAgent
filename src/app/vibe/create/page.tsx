'use client'

import React, { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { useVibeStore, useCurrentProject, useIsGenerating } from '@/stores/vibe-store'
import { useAgentStore } from '@/stores/agent-store'
import VibeInput from '@/components/vibe/vibe-input'
import AgentOrchestra from '@/components/agents/agent-orchestra'
import FileExplorer from '@/components/editor/file-explorer'
import MonacoEditor from '@/components/editor/monaco-editor'
import LivePreview from '@/components/preview/live-preview'
import { VibeInputData, ProjectPreferences, VirtualFile, CodeFile, EditorConfig } from '@/types'
import { Toaster, toast } from 'react-hot-toast'

export default function VibeCodingWorkspace() {
  const { startGeneration, updateProjectFiles } = useVibeStore()
  const { updateAgentStatus, setActivePhase } = useAgentStore()
  const currentProject = useCurrentProject()
  const isGenerating = useIsGenerating()
  
  const [selectedFile, setSelectedFile] = useState<string | null>(null)
  const [editorConfig] = useState<EditorConfig>({
    theme: 'dark',
    fontSize: 14,
    fontFamily: 'JetBrains Mono, monospace',
    tabSize: 2,
    wordWrap: true,
    minimap: true,
    lineNumbers: true,
    autoFormat: true,
    keyBindings: 'default',
  })

  // Simulate project generation workflow
  const handleVibeSubmit = async (input: VibeInputData, preferences: ProjectPreferences) => {
    try {
      await startGeneration(input, preferences)
      toast.success('🎨 Starting project generation...')
      
      // Simulate agent workflow
      simulateAgentWorkflow()
    } catch (error) {
      toast.error('Failed to start generation')
      console.error('Generation error:', error)
    }
  }

  const simulateAgentWorkflow = async () => {
    const phases = [
      { phase: 'planning', duration: 3000, agent: 'planner-agent' },
      { phase: 'coding', duration: 5000, agent: 'code-generator-agent' },
      { phase: 'testing', duration: 2000, agent: 'testing-agent' },
      { phase: 'documenting', duration: 1500, agent: 'doc-generator-agent' },
      { phase: 'reviewing', duration: 2000, agent: 'reviewer-agent' },
    ]

    for (const { phase, duration, agent } of phases) {
      setActivePhase(phase, agent)
      updateAgentStatus(agent, 'working' as any, 0)
      
      // Simulate progress
      for (let progress = 0; progress <= 100; progress += 10) {
        await new Promise(resolve => setTimeout(resolve, duration / 10))
        updateAgentStatus(agent, 'working' as any, progress)
      }
      
      updateAgentStatus(agent, 'completed' as any, 100)
      
      // Generate files based on phase
      if (phase === 'coding') {
        generateSampleFiles()
      }
    }

    setActivePhase('idle')
    toast.success('🎉 Project generation completed!')
  }

  const generateSampleFiles = () => {
    const sampleFiles: VirtualFile[] = [
      {
        id: 'package-json',
        path: 'package.json',
        name: 'package.json',
        content: JSON.stringify({
          name: 'generated-project',
          version: '1.0.0',
          description: 'Generated by Vibe Coding Platform',
          main: 'index.js',
          scripts: {
            start: 'node index.js',
            dev: 'nodemon index.js',
            build: 'webpack --mode production'
          },
          dependencies: {
            react: '^18.2.0',
            'react-dom': '^18.2.0'
          },
          devDependencies: {
            'webpack': '^5.0.0',
            'nodemon': '^2.0.0'
          }
        }, null, 2),
        language: 'json',
        size: 500,
        lastModified: new Date(),
        isDirectory: false,
      },
      {
        id: 'src-dir',
        path: 'src',
        name: 'src',
        content: '',
        language: '',
        size: 0,
        lastModified: new Date(),
        isDirectory: true,
        children: [
          {
            id: 'index-html',
            path: 'src/index.html',
            name: 'index.html',
            content: `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generated Project</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .container {
            background: white;
            padding: 3rem;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            text-align: center;
            max-width: 500px;
        }
        h1 {
            color: #333;
            margin-bottom: 1rem;
            font-size: 2.5rem;
        }
        p {
            color: #666;
            line-height: 1.6;
            margin-bottom: 2rem;
        }
        .btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 10px;
            font-size: 1rem;
            cursor: pointer;
            transition: transform 0.2s;
        }
        .btn:hover {
            transform: translateY(-2px);
        }
        .features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 1rem;
            margin-top: 2rem;
        }
        .feature {
            padding: 1rem;
            background: #f8f9fa;
            border-radius: 10px;
            border: 2px solid #e9ecef;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>🎨 Welcome!</h1>
        <p>Your project has been generated successfully by the Vibe Coding Platform. This is a beautiful, responsive web application ready for customization.</p>
        <button class="btn" onclick="showAlert()">Get Started</button>
        
        <div class="features">
            <div class="feature">
                <h3>📱 Responsive</h3>
                <p>Mobile-first design</p>
            </div>
            <div class="feature">
                <h3>⚡ Fast</h3>
                <p>Optimized performance</p>
            </div>
            <div class="feature">
                <h3>🎨 Beautiful</h3>
                <p>Modern UI design</p>
            </div>
        </div>
    </div>
    
    <script src="script.js"></script>
</body>
</html>`,
            language: 'html',
            size: 2000,
            lastModified: new Date(),
            isDirectory: false,
          },
          {
            id: 'script-js',
            path: 'src/script.js',
            name: 'script.js',
            content: `// Generated by Vibe Coding Platform
console.log('🎨 Vibe Coding Platform - Project loaded successfully!');

function showAlert() {
    console.log('Button clicked!');
    alert('🎉 Welcome to your generated project!\\n\\nThis project was created using AI agents working together.');
}

// Add some interactive features
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded');
    
    // Add click animations to features
    const features = document.querySelectorAll('.feature');
    features.forEach(feature => {
        feature.addEventListener('click', function() {
            this.style.transform = 'scale(1.05)';
            setTimeout(() => {
                this.style.transform = 'scale(1)';
            }, 200);
        });
    });
    
    // Add floating animation
    const container = document.querySelector('.container');
    let float = 0;
    setInterval(() => {
        float += 0.1;
        container.style.transform = \`translateY(\${Math.sin(float) * 3}px)\`;
    }, 100);
});

// Example API call simulation
async function fetchData() {
    console.log('Fetching data...');
    try {
        // Simulate API call
        await new Promise(resolve => setTimeout(resolve, 1000));
        console.log('Data fetched successfully!');
        return { message: 'Hello from generated project!' };
    } catch (error) {
        console.error('Error fetching data:', error);
    }
}

// Initialize the application
fetchData().then(data => {
    console.log('App initialized with data:', data);
});`,
            language: 'javascript',
            size: 1500,
            lastModified: new Date(),
            isDirectory: false,
          },
        ],
      },
      {
        id: 'readme-md',
        path: 'README.md',
        name: 'README.md',
        content: `# Generated Project

This project was created by the **Vibe Coding Platform** using AI-powered agents working in collaboration.

## ✨ Features

- 🎨 Beautiful, modern design
- 📱 Fully responsive layout
- ⚡ Optimized performance
- 🛠️ Ready for customization

## 🚀 Getting Started

1. Install dependencies:
   \`\`\`bash
   npm install
   \`\`\`

2. Start the development server:
   \`\`\`bash
   npm start
   \`\`\`

3. Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

## 🏗️ Project Structure

\`\`\`
project/
├── src/
│   ├── index.html
│   └── script.js
├── package.json
└── README.md
\`\`\`

## 🤖 Generated by AI Agents

This project was created through the collaboration of multiple AI agents:

- **🏗️ Architect**: Planned the project structure and requirements
- **⚡ CodeCrafter**: Generated the HTML, CSS, and JavaScript code
- **🛡️ TestGuardian**: Created tests to ensure quality
- **📚 DocMaster**: Generated this documentation
- **🔍 QualityGuard**: Reviewed and optimized the final code

## 📝 License

MIT License - feel free to use this project as a starting point for your own creations!

---

*Generated with ❤️ by [Vibe Coding Platform](https://vibe.dev)*`,
        language: 'markdown',
        size: 1200,
        lastModified: new Date(),
        isDirectory: false,
      },
    ]

    updateProjectFiles(sampleFiles)
    toast.success('📁 Files generated successfully!')
  }

  const handleFileSelect = (path: string) => {
    setSelectedFile(path)
  }

  const getCurrentFile = (): CodeFile | null => {
    if (!selectedFile || !currentProject?.files) return null
    
    const file = findFileByPath(currentProject.files, selectedFile)
    if (!file || file.isDirectory) return null

    return {
      id: file.id,
      path: file.path,
      content: file.content,
      language: file.language,
      isDirty: false,
      lastSaved: file.lastModified,
      errors: [],
      warnings: [],
    }
  }

  const findFileByPath = (files: VirtualFile[], path: string): VirtualFile | null => {
    for (const file of files) {
      if (file.path === path) return file
      if (file.children) {
        const found = findFileByPath(file.children, path)
        if (found) return found
      }
    }
    return null
  }

  const handleContentChange = (content: string) => {
    if (!currentProject?.files || !selectedFile) return
    
    // Update file content in store
    const updatedFiles = updateFileContent(currentProject.files, selectedFile, content)
    updateProjectFiles(updatedFiles)
  }

  const updateFileContent = (files: VirtualFile[], path: string, content: string): VirtualFile[] => {
    return files.map(file => {
      if (file.path === path) {
        return { ...file, content, lastModified: new Date() }
      }
      if (file.children) {
        return { ...file, children: updateFileContent(file.children, path, content) }
      }
      return file
    })
  }

  const handleSave = () => {
    toast.success('💾 File saved successfully!')
  }

  const handleFileCreate = (path: string, isDirectory: boolean) => {
    console.log('Create file:', path, 'isDirectory:', isDirectory)
    toast.success(`${isDirectory ? '📁' : '📄'} ${isDirectory ? 'Folder' : 'File'} created!`)
  }

  const handleFileDelete = (path: string) => {
    console.log('Delete file:', path)
    toast.success('🗑️ File deleted!')
  }

  const handleFileRename = (oldPath: string, newPath: string) => {
    console.log('Rename file:', oldPath, 'to', newPath)
    toast.success('✏️ File renamed!')
  }

  const handlePreviewRefresh = () => {
    toast.success('🔄 Preview refreshed!')
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900">
      <Toaster 
        position="top-right"
        toastOptions={{
          duration: 3000,
          style: {
            background: '#1e293b',
            color: '#f1f5f9',
            border: '1px solid #475569',
          },
        }}
      />
      
      <AnimatePresence mode="wait">
        {!currentProject ? (
          // Vibe Input Phase
          <motion.div
            key="vibe-input"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="container mx-auto px-4 py-12"
          >
            <VibeInput onSubmit={handleVibeSubmit} />
          </motion.div>
        ) : (
          // Workspace Phase
          <motion.div
            key="workspace"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="h-screen flex flex-col"
          >
            {/* Header */}
            <div className="h-16 border-b border-slate-700/30 bg-slate-900/50 backdrop-blur-sm flex items-center justify-between px-6">
              <div className="flex items-center space-x-4">
                <h1 className="text-xl font-bold text-white">
                  {currentProject.name}
                </h1>
                <div className="px-3 py-1 bg-purple-500/20 text-purple-300 rounded-full text-sm">
                  {currentProject.type.replace('_', ' ')}
                </div>
              </div>
              
              <div className="flex items-center space-x-2">
                {isGenerating && (
                  <div className="flex items-center space-x-2 text-yellow-400">
                    <div className="w-2 h-2 bg-yellow-400 rounded-full animate-pulse"></div>
                    <span className="text-sm">Generating...</span>
                  </div>
                )}
              </div>
            </div>

            {/* Main Content */}
            <div className="flex-1 flex overflow-hidden">
              {/* Left Sidebar - Agent Orchestra */}
              <motion.div 
                initial={{ x: -300, opacity: 0 }}
                animate={{ x: 0, opacity: 1 }}
                transition={{ delay: 0.1 }}
                className="w-80 border-r border-slate-700/30 bg-slate-900/30 backdrop-blur-sm overflow-auto"
              >
                <AgentOrchestra className="h-full p-4" />
              </motion.div>

              {/* Center - Editor */}
              <div className="flex-1 flex flex-col">
                {/* File Explorer + Editor */}
                <div className="flex-1 flex">
                  {/* File Explorer */}
                  <motion.div 
                    initial={{ y: 300, opacity: 0 }}
                    animate={{ y: 0, opacity: 1 }}
                    transition={{ delay: 0.2 }}
                    className="w-64 border-r border-slate-700/30"
                  >
                    <FileExplorer
                      files={currentProject.files || []}
                      selectedFile={selectedFile}
                      onFileSelect={handleFileSelect}
                      onFileCreate={handleFileCreate}
                      onFileDelete={handleFileDelete}
                      onFileRename={handleFileRename}
                      className="h-full"
                    />
                  </motion.div>

                  {/* Code Editor */}
                  <motion.div 
                    initial={{ y: 300, opacity: 0 }}
                    animate={{ y: 0, opacity: 1 }}
                    transition={{ delay: 0.3 }}
                    className="flex-1"
                  >
                    <MonacoEditor
                      file={getCurrentFile()}
                      onContentChange={handleContentChange}
                      onSave={handleSave}
                      config={editorConfig}
                      className="h-full"
                    />
                  </motion.div>
                </div>
              </div>

              {/* Right Sidebar - Live Preview */}
              <motion.div 
                initial={{ x: 300, opacity: 0 }}
                animate={{ x: 0, opacity: 1 }}
                transition={{ delay: 0.4 }}
                className="w-96 border-l border-slate-700/30"
              >
                <LivePreview
                  files={currentProject.files || []}
                  previewData={currentProject.preview}
                  onRefresh={handlePreviewRefresh}
                  className="h-full"
                />
              </motion.div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  )
}