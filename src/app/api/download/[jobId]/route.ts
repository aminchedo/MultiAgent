import { NextResponse } from 'next/server'
import JSZip from 'jszip'

interface JobRecord {
  id: string
  description: string
  createdAt: number
}

declare global {
  // eslint-disable-next-line no-var
  var __jobsStore: Map<string, JobRecord> | undefined
}

function getJobsStore(): Map<string, JobRecord> {
  if (!globalThis.__jobsStore) {
    globalThis.__jobsStore = new Map<string, JobRecord>()
  }
  return globalThis.__jobsStore
}

export async function GET(request: Request, context: any) {
  const store = getJobsStore()
  const job = store.get(context.params.jobId)

  if (!job) {
    return new NextResponse('Job not found', { status: 404 })
  }

  const zip = new JSZip()

  zip.file(
    'src/App.jsx',
    `import React from 'react'\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>ðŸŽ¨ Generated by Vibe Coding</h1>\n      <p>${job.description}</p>\n    </div>\n  )\n}\n`
  )

  zip.file(
    'README.md',
    `# Generated by Vibe Coding Platform\n\nThis project was generated by 5 AI agents working together.\n\n## Description\n${job.description}\n\n## How to Run\n1. npm install\n2. npm start\n`
  )

  const content = await zip.generateAsync({ type: 'uint8array' })
  const arrayBuffer = new ArrayBuffer(content.byteLength)
  const view = new Uint8Array(arrayBuffer)
  view.set(content)

  return new Response(arrayBuffer, {
    status: 200,
    headers: {
      'Content-Type': 'application/zip',
      'Content-Disposition': `attachment; filename=\"vibe-project-${job.id}.zip\"`
    }
  })
}