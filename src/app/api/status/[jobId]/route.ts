import { NextResponse } from 'next/server'

interface JobRecord {
  id: string
  description: string
  createdAt: number
}

declare global {
  // eslint-disable-next-line no-var
  var __jobsStore: Map<string, JobRecord> | undefined
}

function getJobsStore(): Map<string, JobRecord> {
  if (!globalThis.__jobsStore) {
    globalThis.__jobsStore = new Map<string, JobRecord>()
  }
  return globalThis.__jobsStore
}

function getAgentByProgress(p: number): string {
  if (p < 20) return 'planner'
  if (p < 40) return 'code_generator'
  if (p < 60) return 'tester'
  if (p < 80) return 'doc_generator'
  return 'reviewer'
}

export async function GET(_request: Request, context: any) {
  const store = getJobsStore()
  const job = store.get(context.params.jobId)

  if (!job) {
    return NextResponse.json({ error: 'Job not found' }, { status: 404 })
  }

  const elapsedMs = Date.now() - job.createdAt
  // Progress reaches 100% in ~20 seconds
  const progress = Math.max(0, Math.min(100, Math.floor(elapsedMs / 200)))
  const status = progress >= 100 ? 'completed' : 'running'

  const files = [] as any[]
  if (progress >= 40) {
    files.push(
      {
        path: 'src/App.jsx',
        content: `import React from 'react'\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>ðŸŽ¨ Generated by Vibe Coding</h1>\n      <p>${job.description}</p>\n    </div>\n  )\n}\n`,
        language: 'javascript',
        size: 650,
        created_by: 'code_generator',
        is_binary: false,
        type: 'file'
      },
      {
        path: 'README.md',
        content: `# Generated Project\n\nDescription: ${job.description}\n`,
        language: 'markdown',
        size: 200,
        created_by: 'doc_generator',
        is_binary: false,
        type: 'file'
      }
    )
  }

  return NextResponse.json({
    id: job.id,
    description: job.description,
    status,
    progress,
    current_agent: getAgentByProgress(progress),
    files
  })
}