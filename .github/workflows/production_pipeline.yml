name: Production CI/CD Pipeline
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"
  DOCKER_REGISTRY: "your-registry.com"
  K8S_NAMESPACE: "agent-system"

jobs:
  # Phase 1: Component Testing
  component-tests:
    name: Component Testing
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: agent_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run agent coordination tests
        run: |
          pytest tests/test_agent_coordination.py -v --cov=backend.core.agent_coordinator --cov-report=xml

      - name: Run security agent tests
        run: |
          pytest tests/test_security_agent.py -v --cov=backend.agents.specialized.security_agent

      - name: Run API completeness tests
        run: |
          pytest tests/test_api_completeness.py -v --cov=backend.api

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          fail_ci_if_error: true

      - name: Component test results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Component Tests
          path: pytest-results.xml
          reporter: java-junit

  # Phase 2: Integration Testing
  integration-tests:
    name: Integration Testing
    runs-on: ubuntu-latest
    needs: component-tests
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: agent_test
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Start agent system
        run: |
          python -m backend.core.app &
          sleep 10

      - name: Run integration tests
        run: |
          pytest tests/ -m integration -v --maxfail=1

      - name: Run end-to-end workflow tests
        run: |
          pytest tests/test_e2e_workflows.py -v

      - name: Test agent coordination integration
        run: |
          python tests/integration/test_full_coordination.py

  # Phase 3: Security and Compliance Testing
  security-compliance:
    name: Security & Compliance Testing
    runs-on: ubuntu-latest
    needs: component-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          pip install bandit safety semgrep
          npm install -g audit-ci

      - name: Run SAST security scan
        run: |
          bandit -r backend/ -f json -o bandit-report.json
          safety check --json --output safety-report.json
          semgrep --config=auto backend/ --json --output=semgrep-report.json

      - name: OWASP Top 10 compliance check
        run: |
          python -m backend.agents.specialized.security_agent \
            --scan-type comprehensive \
            --targets backend/ frontend/ \
            --output owasp-compliance.json

      - name: Secret detection scan
        run: |
          python scripts/scan_secrets.py --path . --output secrets-report.json

      - name: Dependency vulnerability scan
        run: |
          safety check --json --output dependency-vulns.json
          npm audit --json > npm-audit.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json
            owasp-compliance.json
            secrets-report.json

      - name: Security gate check
        run: |
          python scripts/security_gate_check.py \
            --reports bandit-report.json safety-report.json owasp-compliance.json \
            --fail-on-critical true

  # Phase 4: Performance and Load Testing
  performance-tests:
    name: Performance & Load Testing
    runs-on: ubuntu-latest
    needs: integration-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install locust pytest-benchmark

      - name: Start system for load testing
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Run performance benchmarks
        run: |
          pytest tests/ -m benchmark --benchmark-json=benchmark-results.json

      - name: Run load tests with Locust
        run: |
          locust -f tests/load_tests/locustfile.py \
            --headless \
            --users 1000 \
            --spawn-rate 100 \
            --run-time 300s \
            --host http://localhost:8000 \
            --csv=load_test_results

      - name: Validate SLA requirements
        run: |
          python scripts/validate_sla.py \
            --benchmark-results benchmark-results.json \
            --load-results load_test_results_stats.csv \
            --max-response-time 500 \
            --min-throughput 1000

      - name: Upload performance reports
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports
          path: |
            benchmark-results.json
            load_test_results_*

  # Phase 5: Chaos Engineering Tests
  chaos-tests:
    name: Chaos Engineering
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install chaos engineering tools
        run: |
          pip install chaostoolkit chaostoolkit-kubernetes
          pip install -r requirements.txt

      - name: Start test environment
        run: |
          docker-compose -f docker-compose.chaos.yml up -d
          sleep 60

      - name: Run network partition tests
        run: |
          pytest tests/ -m chaos -k "network_partition" -v

      - name: Run Redis failure tests
        run: |
          pytest tests/ -m chaos -k "redis_failure" -v

      - name: Run agent failure tests
        run: |
          pytest tests/ -m chaos -k "agent_failure" -v

      - name: Chaos experiment with ChaosToolkit
        run: |
          chaos run tests/chaos/experiments/agent-resilience.json

      - name: Validate system recovery
        run: |
          python scripts/validate_recovery.py --timeout 300

  # Phase 6: Build and Push Images
  build-images:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [component-tests, security-compliance]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Generate build metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/agent-system
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,prefix={{branch}}-

      - name: Build and push main image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push agent images
        run: |
          docker build -t ${{ env.DOCKER_REGISTRY }}/security-agent:${{ github.sha }} -f docker/Dockerfile.security-agent .
          docker push ${{ env.DOCKER_REGISTRY }}/security-agent:${{ github.sha }}

      - name: Update image digests
        run: |
          echo "MAIN_IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ env.DOCKER_REGISTRY }}/agent-system:${{ github.sha }})" >> $GITHUB_ENV

  # Phase 7: Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, performance-tests, build-images]
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.STAGING_KUBECONFIG }}

      - name: Deploy to staging
        run: |
          envsubst < k8s/staging/deployment.yaml | kubectl apply -f -
          kubectl set image deployment/agent-system \
            agent-system=${{ env.DOCKER_REGISTRY }}/agent-system:${{ github.sha }} \
            -n ${{ env.K8S_NAMESPACE }}-staging

      - name: Wait for deployment
        run: |
          kubectl rollout status deployment/agent-system \
            -n ${{ env.K8S_NAMESPACE }}-staging \
            --timeout=600s

      - name: Run staging smoke tests
        run: |
          python scripts/smoke_tests.py \
            --endpoint https://staging-api.agents.example.com \
            --timeout 300

      - name: Run staging integration tests
        run: |
          pytest tests/staging/ -v --endpoint=https://staging-api.agents.example.com

  # Phase 8: Production Readiness Gate
  production-readiness:
    name: Production Readiness Gate
    runs-on: ubuntu-latest
    needs: [deploy-staging, chaos-tests, security-compliance]
    if: github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Production readiness checklist
        run: |
          python scripts/production_readiness_check.py \
            --security-reports security-reports/ \
            --performance-reports performance-reports/ \
            --staging-endpoint https://staging-api.agents.example.com \
            --required-uptime 99.95 \
            --max-response-time 500

      - name: Validate SLA compliance
        run: |
          python scripts/validate_production_sla.py \
            --staging-metrics https://staging-api.agents.example.com/metrics/sla \
            --required-uptime 99.95

      - name: Security clearance check
        run: |
          python scripts/security_clearance.py \
            --owasp-report owasp-compliance.json \
            --min-score 95

      - name: Final approval gate
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: devops-team,security-team
          minimum-approvals: 2
          issue-title: "Production Deployment Approval Required"

  # Phase 9: Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: production-readiness
    if: github.event_name == 'release'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.PRODUCTION_KUBECONFIG }}

      - name: Backup current deployment
        run: |
          kubectl get deployment agent-system -n ${{ env.K8S_NAMESPACE }} -o yaml > deployment-backup.yaml
          kubectl get configmap agent-config -n ${{ env.K8S_NAMESPACE }} -o yaml > config-backup.yaml

      - name: Blue-Green deployment preparation
        run: |
          # Create green deployment
          envsubst < k8s/production/deployment-green.yaml | kubectl apply -f -
          kubectl set image deployment/agent-system-green \
            agent-system=${{ env.DOCKER_REGISTRY }}/agent-system:${{ github.sha }} \
            -n ${{ env.K8S_NAMESPACE }}

      - name: Wait for green deployment
        run: |
          kubectl rollout status deployment/agent-system-green \
            -n ${{ env.K8S_NAMESPACE }} \
            --timeout=600s

      - name: Run production smoke tests on green
        run: |
          python scripts/production_smoke_tests.py \
            --endpoint https://green-api.agents.example.com \
            --comprehensive true

      - name: Switch traffic to green (Blue-Green)
        run: |
          kubectl patch service agent-system-service \
            -n ${{ env.K8S_NAMESPACE }} \
            -p '{"spec":{"selector":{"version":"green"}}}'

      - name: Monitor production deployment
        run: |
          python scripts/monitor_deployment.py \
            --endpoint https://api.agents.example.com \
            --duration 600 \
            --max-error-rate 0.1 \
            --max-response-time 500

      - name: Complete deployment
        run: |
          # Remove old blue deployment
          kubectl delete deployment agent-system-blue -n ${{ env.K8S_NAMESPACE }} || true
          # Rename green to blue for next deployment
          kubectl patch deployment agent-system-green \
            -n ${{ env.K8S_NAMESPACE }} \
            -p '{"metadata":{"name":"agent-system-blue"}}'

      - name: Store deployment artifacts
        uses: actions/upload-artifact@v3
        with:
          name: production-deployment-${{ github.sha }}
          path: |
            deployment-backup.yaml
            config-backup.yaml

  # Rollback Job (Manual trigger)
  rollback-production:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.PRODUCTION_KUBECONFIG }}

      - name: Download previous deployment
        uses: actions/download-artifact@v3
        with:
          name: production-deployment-${{ github.event.inputs.previous_sha }}

      - name: Execute rollback
        run: |
          # Apply previous deployment configuration
          kubectl apply -f deployment-backup.yaml
          kubectl apply -f config-backup.yaml
          
          # Wait for rollback to complete
          kubectl rollout status deployment/agent-system \
            -n ${{ env.K8S_NAMESPACE }} \
            --timeout=300s

      - name: Verify rollback
        run: |
          python scripts/verify_rollback.py \
            --endpoint https://api.agents.example.com \
            --expected-version ${{ github.event.inputs.previous_sha }}

      - name: Notify teams
        run: |
          python scripts/notify_rollback.py \
            --version ${{ github.event.inputs.previous_sha }} \
            --reason "${{ github.event.inputs.rollback_reason }}"

  # Cleanup job
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
      - name: Cleanup test environments
        run: |
          docker-compose -f docker-compose.test.yml down -v || true
          docker-compose -f docker-compose.chaos.yml down -v || true

      - name: Cleanup old artifacts
        run: |
          # Keep only last 10 builds
          python scripts/cleanup_artifacts.py --keep-last 10

# Reusable workflow for rollback
rollback:
  workflow_dispatch:
    inputs:
      previous_sha:
        description: 'SHA of the version to rollback to'
        required: true
      rollback_reason:
        description: 'Reason for rollback'
        required: true
        default: 'Production issue detected'