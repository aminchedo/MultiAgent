name: üöÄ Deploy to Hugging Face Spaces

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      message:
        description: 'Deployment message'
        required: false
        default: 'ü§ñ Manual deployment'

env:
  HF_SPACE: Really-amin/ultichat-hugginigfae

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: üì¶ Install Hugging Face CLI
      run: |
        pip install -U huggingface_hub
        pip install -U hf_transfer
        
    - name: üîê Validate HF Token
      env:
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
      run: |
        if [ -z "$HF_TOKEN" ]; then
          echo "‚ùå HF_TOKEN secret not found!"
          echo "Please add HF_TOKEN to your GitHub repository secrets."
          echo "Go to: Settings > Secrets and variables > Actions > New repository secret"
          exit 1
        fi
        
        if ! echo "$HF_TOKEN" | grep -q "^hf_"; then
          echo "‚ùå Invalid HF_TOKEN format. Token should start with 'hf_'"
          exit 1
        fi
        
        echo "‚úÖ HF_TOKEN found and has correct format"
        
        # Test token validity
        if huggingface-cli whoami --token "$HF_TOKEN" >/dev/null 2>&1; then
          echo "‚úÖ HF_TOKEN is valid"
          huggingface-cli whoami --token "$HF_TOKEN"
        else
          echo "‚ùå HF_TOKEN validation failed"
          exit 1
        fi
        
    - name: üèóÔ∏è Prepare deployment files
      run: |
        echo "üìù Creating app.py for Hugging Face Spaces..."
        
        # Create app.py if it doesn't exist
        if [ ! -f "app.py" ]; then
          cat > app.py << 'EOF'
import gradio as gr
import subprocess
import sys
import os
from pathlib import Path

# Set environment variables for Hugging Face Spaces
os.environ["PORT"] = "7860"
os.environ["HOST"] = "0.0.0.0"

def install_requirements():
    """Install requirements if needed"""
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        return "‚úÖ Requirements installed successfully"
    except Exception as e:
        return f"‚ùå Error installing requirements: {str(e)}"

def start_app():
    """Start the main application"""
    try:
        # Try to import and run the main application
        if Path("main.py").exists():
            subprocess.Popen([sys.executable, "main.py"])
            return "üöÄ Application started successfully"
        else:
            return "‚ùå main.py not found"
    except Exception as e:
        return f"‚ùå Error starting application: {str(e)}"

# Create Gradio interface
with gr.Blocks(title="Multi-Agent Code Generator") as demo:
    gr.Markdown("# üöÄ Multi-Agent Code Generation System")
    gr.Markdown("A production-ready, intelligent code generation platform powered by CrewAI and OpenAI")
    
    with gr.Row():
        install_btn = gr.Button("üì¶ Install Requirements", variant="secondary")
        start_btn = gr.Button("üöÄ Start Application", variant="primary")
    
    output = gr.Textbox(label="Status", lines=3)
    
    install_btn.click(install_requirements, outputs=output)
    start_btn.click(start_app, outputs=output)
    
    gr.Markdown("""
    ## üîß Setup Instructions
    
    1. Click "üì¶ Install Requirements" to install dependencies
    2. Set your environment variables in the Hugging Face Spaces settings:
       - `OPENAI_API_KEY`: Your OpenAI API key
       - `JWT_SECRET_KEY`: A secure random string
    3. Click "üöÄ Start Application" to launch the system
    
    ## üåê Direct Access
    
    Once started, you can access the application directly at the application URL.
    """)

if __name__ == "__main__":
    demo.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=False
    )
EOF
        fi
        
        # Ensure requirements.txt exists
        if [ ! -f "requirements.txt" ]; then
          echo "‚ùå requirements.txt not found!"
          exit 1
        fi
        
        echo "‚úÖ Deployment files prepared"
        
    - name: üöÄ Deploy to Hugging Face
      env:
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
        HF_HUB_ENABLE_HF_TRANSFER: 1
      run: |
        # Login to Hugging Face
        huggingface-cli login --token "$HF_TOKEN"
        
        # Prepare commit message
        COMMIT_MSG="${{ github.event.inputs.message }}"
        if [ -z "$COMMIT_MSG" ]; then
          COMMIT_MSG="ü§ñ Auto-deploy: $(git log -1 --pretty=%B | head -1)"
        fi
        
        echo "üì§ Uploading to Hugging Face Space: $HF_SPACE"
        echo "üí¨ Commit message: $COMMIT_MSG"
        
        # Upload files to Hugging Face Space
        huggingface-cli upload "$HF_SPACE" . \
          --repo-type=space \
          --commit-message="$COMMIT_MSG" \
          --exclude="*.git*" \
          --exclude="*/__pycache__/*" \
          --exclude="*.pyc" \
          --exclude="*/.venv/*" \
          --exclude="*/venv/*" \
          --exclude="*/node_modules/*" \
          --exclude="*.log" \
          --exclude="*/temp/*" \
          --exclude="*/logs/*" \
          --exclude="*/backups/*"
        
    - name: ‚úÖ Deployment Summary
      run: |
        echo "üéâ Deployment completed successfully!"
        echo ""
        echo "üìä Deployment Details:"
        echo "‚îú‚îÄ üöÄ Space: $HF_SPACE"
        echo "‚îú‚îÄ üåê URL: https://huggingface.co/spaces/$HF_SPACE"
        echo "‚îú‚îÄ üîÑ Commit: $(git rev-parse --short HEAD)"
        echo "‚îî‚îÄ üìÖ Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo ""
        echo "üîó View your deployment: https://huggingface.co/spaces/$HF_SPACE"
        
    - name: üìã Post-deployment check
      env:
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
      run: |
        echo "üîç Checking deployment status..."
        sleep 10
        
        # Check if space is building/running
        if huggingface-cli repo-info "$HF_SPACE" --repo-type=space --token "$HF_TOKEN" >/dev/null 2>&1; then
          echo "‚úÖ Space is accessible and updating"
        else
          echo "‚ö†Ô∏è Space check inconclusive (this might be normal)"
        fi
        
        echo ""
        echo "üìù Next steps:"
        echo "1. Visit https://huggingface.co/spaces/$HF_SPACE"
        echo "2. Check the build logs in the Hugging Face interface"
        echo "3. Set your environment variables if needed"
        echo "4. Test the application functionality"