from fastapi import FastAPI, HTTPException, Request, Header
from fastapi.responses import JSONResponse
import json
import uuid
import asyncio
from datetime import datetime
import jwt
import os

app = FastAPI()

# Job storage (replace with database)
jobs_db = {}

def verify_token(authorization: str):
    if not authorization or not authorization.startswith('Bearer '):
        raise HTTPException(status_code=401, detail="Missing or invalid token")
    
    token = authorization.split(' ')[1]
    try:
        payload = jwt.decode(token, os.getenv('JWT_SECRET_KEY', 'secret'), algorithms=['HS256'])
        return payload
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=401, detail="Token expired")
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=401, detail="Invalid token")

async def simulate_agent_work(job_id: str):
    """Simulate AI agents working on the project"""
    agents = [
        {'name': 'planner', 'task': 'Analyzing requirements and creating project structure'},
        {'name': 'code_generator', 'task': 'Generating React components and application logic'},
        {'name': 'tester', 'task': 'Creating unit tests and integration tests'},
        {'name': 'doc_generator', 'task': 'Writing documentation and README files'},
        {'name': 'reviewer', 'task': 'Reviewing code quality and optimization'}
    ]
    
    for i, agent in enumerate(agents):
        # Update job progress
        if job_id in jobs_db:
            jobs_db[job_id]['status'] = 'running'
            jobs_db[job_id]['current_agent'] = agent['name']
            jobs_db[job_id]['progress'] = (i + 1) * 20
            jobs_db[job_id]['updated_at'] = datetime.utcnow().isoformat()
        
        # Simulate work time
        await asyncio.sleep(3)
        
        # Generate sample files for code_generator
        if agent['name'] == 'code_generator' and job_id in jobs_db:
            description = jobs_db[job_id]['description']
            
            # Generate sample React app
            jobs_db[job_id]['files'] = [
                {
                    'path': 'src/App.jsx',
                    'content': f'''import React from 'react';
import './App.css';

function App() {{
  return (
    <div className="App">
      <header className="App-header">
        <h1>ðŸŽ¨ Generated by Vibe Coding</h1>
        <p>{description}</p>
        <div className="features">
          <div className="feature-card">
            <h3>âœ¨ AI-Powered</h3>
            <p>Built by 5 AI agents working together</p>
          </div>
          <div className="feature-card">
            <h3>ðŸš€ Modern Stack</h3>
            <p>React, Tailwind CSS, and best practices</p>
          </div>
          <div className="feature-card">
            <h3>ðŸ“± Responsive</h3>
            <p>Perfect on desktop, tablet, and mobile</p>
          </div>
        </div>
      </header>
    </div>
  );
}}

export default App;''',
                    'language': 'javascript',
                    'size': 650,
                    'created_by': 'code_generator'
                },
                {
                    'path': 'src/App.css',
                    'content': '''.App {
  text-align: center;
  min-height: 100vh;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.App-header {
  padding: 4rem 2rem;
  color: white;
}

.App-header h1 {
  font-size: 3rem;
  margin-bottom: 1rem;
  background: linear-gradient(45deg, #FFD700, #FFA500);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

.features {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 2rem;
  margin-top: 3rem;
  max-width: 1200px;
  margin-left: auto;
  margin-right: auto;
}

.feature-card {
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 1rem;
  padding: 2rem;
  backdrop-filter: blur(10px);
  transition: transform 0.3s ease;
}

.feature-card:hover {
  transform: translateY(-5px);
}

.feature-card h3 {
  font-size: 1.5rem;
  margin-bottom: 1rem;
}''',
                    'language': 'css',
                    'size': 850,
                    'created_by': 'code_generator'
                },
                {
                    'path': 'package.json',
                    'content': '''{
  "name": "vibe-coding-generated-app",
  "version": "1.0.0",
  "description": "Generated by Vibe Coding Platform",
  "main": "index.js",
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}''',
                    'language': 'json',
                    'size': 500,
                    'created_by': 'code_generator'
                }
            ]
    
    # Mark as completed
    if job_id in jobs_db:
        jobs_db[job_id]['status'] = 'completed'
        jobs_db[job_id]['progress'] = 100
        jobs_db[job_id]['completed_at'] = datetime.utcnow().isoformat()

async def handler(request: Request):
    if request.method == "POST":
        try:
            # Verify authentication
            auth_header = request.headers.get('authorization')
            user = verify_token(auth_header)
            
            body = await request.json()
            description = body.get('description')
            project_type = body.get('project_type', 'web')
            complexity = body.get('complexity', 'simple')
            
            if not description:
                return JSONResponse(
                    status_code=400,
                    content={"error": "Description is required"}
                )
            
            # Create new job
            job_id = str(uuid.uuid4())
            job = {
                'id': job_id,
                'user_id': user['user_id'],
                'description': description,
                'project_type': project_type,
                'complexity': complexity,
                'status': 'pending',
                'progress': 0,
                'current_agent': None,
                'files': [],
                'created_at': datetime.utcnow().isoformat(),
                'updated_at': datetime.utcnow().isoformat()
            }
            
            jobs_db[job_id] = job
            
            # Start background processing
            asyncio.create_task(simulate_agent_work(job_id))
            
            return JSONResponse(content=job)
            
        except HTTPException as he:
            return JSONResponse(
                status_code=he.status_code,
                content={"error": he.detail}
            )
        except Exception as e:
            return JSONResponse(
                status_code=500,
                content={"error": str(e)}
            )
    
    return JSONResponse(
        status_code=405,
        content={"error": "Method not allowed"}
    )